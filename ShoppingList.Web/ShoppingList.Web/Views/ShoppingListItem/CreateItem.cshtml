@model ShoppingList.Models.ShoppingListItemCreateViewModel

@{
    ViewBag.Title = "CreateItem";
}

<h2>Create Item for @Model.GetShoppingListName(int.Parse(Url.RequestContext.RouteData.Values["id"].ToString())) Shopping List</h2>


@using (Html.BeginForm("CreateItem", "ShoppingListItem", FormMethod.Post,
                new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary("", new { @class = "text-danger" })
    <div class="form-horizontal">
        <h4>List Item</h4>
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Image", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBox("File", "", new { @class = "form-control-static", @type = "file", @onchange = "return CheckFile(this)"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Priority, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Priority, "-- Select Priority--", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Priority, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "ItemIndex", new { Id = Url.RequestContext.RouteData.Values["id"] })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        var validFilesTypes = ["BMP", "GIF", "PNG", "JPG", "JPEG"];

        function CheckExtension(file) {
            /*global document: false */
            var filePath = file.value;
            var ext = filePath.substring(filePath.lastIndexOf('.') + 1).toUpperCase();
            var isValidFile = false;

            for (var i = 0; i < validFilesTypes.length; i++) {
                if (ext == validFilesTypes[i]) {
                    isValidFile = true;
                    break;
                }
            }

            if (!isValidFile) {
                file.value = null;
                alert("Invalid Image File. You are only allowed to upload a " + validFilesTypes.join(", ") + " file.");
            }

            return isValidFile;
        }
    </script>

    <script type="text/javascript">
        var validFileSize = 4 * 1024 * 1024;

        function CheckFileSize(file) {
            /*global document: false */
            var fileSize = file.files[0].size;
            var isValidFile = false;
            if (fileSize !== 0 && fileSize <= validFileSize) {
                isValidFile = true;
            }
            else {
                file.value = null;
                alert("The image size cannot exceed 4 MB and cannot be 0.");
            }
            return isValidFile;
        }
    </script>

    <script type="text/javascript">
        function CheckFile(file) {
            var isValidFile = CheckExtension(file);

            if (isValidFile)
                isValidFile = CheckFileSize(file);

            return isValidFile;
        }
    </script>
}